services:
  gateway:
    build: ./gateway
    ports:
      - "5050:5050"
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      post-service:
        condition: service_healthy
      stock-service:
        condition: service_healthy
      prediction-service:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./gateway:/app
      - /app/node_modules
    environment:
      - PORT=5050
      - AUTH_SERVICE_URL=http://auth-service:5001
      - USER_SERVICE_URL=http://user-service:5002
      - POST_SERVICE_URL=http://post-service:5003
      - STOCK_SERVICE_URL=http://stock-service:5004
      - PREDICTION_SERVICE_URL=http://prediction-service:5005
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-service:
    build: ./auth-service
    ports:
      - "5001:5001"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./auth-service:/app
      - /app/node_modules
    environment:
      - PORT=5001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/simplehot_db
      - JWT_SECRET=your_jwt_secret_key_here
    command: npm start
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  user-service:
    build: ./user-service
    ports:
      - "5002:5002"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./user-service:/app
      - /app/node_modules
    environment:
      - PORT=5002
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/simplehot_db
      - JWT_SECRET=your_jwt_secret_key_here
    command: npm start
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  post-service:
    build: ./post-service
    ports:
      - "5003:5003"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./post-service:/app
      - /app/node_modules
    environment:
      - PORT=5003
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/simplehot_db
      - JWT_SECRET=your_jwt_secret_key_here
    command: npm start
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  stock-service:
    build: ./stock-service
    ports:
      - "5004:5004"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./stock-service:/app
      - /app/node_modules
    environment:
      - PORT=5004
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/simplehot_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
    command: npm start
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prediction-service:
    build: ./prediction-service
    ports:
      - "5005:5005"
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./prediction-service:/app
      - /app/node_modules
    environment:
      - PORT=5005
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/simplehot_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
    command: npm start
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - microservices-network
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "8080:80"
    networks:
      - microservices-network
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@simplehot.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  metabase:
    image: metabase/metabase:latest
    ports:
      - "12345:3000"
    networks:
      - microservices-network
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=postgres
      - MB_DB_PASS=postgres
      - MB_DB_HOST=postgres
    volumes:
      - metabase-data:/metabase-data
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data:
  redis-data:
  metabase-data: 